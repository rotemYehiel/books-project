{"remainingRequest":"C:\\Users\\rotem\\OneDrive\\שולחן העבודה\\vue.js\\my-project\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\rotem\\OneDrive\\שולחן העבודה\\vue.js\\my-project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\rotem\\OneDrive\\שולחן העבודה\\vue.js\\my-project\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\rotem\\OneDrive\\שולחן העבודה\\vue.js\\my-project\\frontend\\src\\views\\bookEdit.vue?vue&type=template&id=19c785a6&","dependencies":[{"path":"C:\\Users\\rotem\\OneDrive\\שולחן העבודה\\vue.js\\my-project\\frontend\\src\\views\\bookEdit.vue","mtime":1591766039337},{"path":"C:\\Users\\rotem\\OneDrive\\שולחן העבודה\\vue.js\\my-project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\rotem\\OneDrive\\שולחן העבודה\\vue.js\\my-project\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\rotem\\OneDrive\\שולחן העבודה\\vue.js\\my-project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\rotem\\OneDrive\\שולחן העבודה\\vue.js\\my-project\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}